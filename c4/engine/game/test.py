import unittest

import numpy as np

from c4AI.board import Board, PLAYER1


class TestBoard(unittest.TestCase):
    def test_end_diag_lr(self):
        b = Board(np.array([[1, 0, 0, 0, 0, 0, 0],
                            [2, 1, 0, 0, 0, 0, 0],
                            [2, 2, 1, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0]]))
        self.assertTrue(b.end == PLAYER1)

        b = Board(np.array([[1, 2, 1, 2, 1, 2, 1],
                            [1, 2, 1, 2, 1, 1, 0],
                            [1, 2, 1, 2, 1, 0, 0],
                            [2, 1, 2, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0]]))
        self.assertTrue(b.end == PLAYER1)

        b = Board(np.array([[1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0],
                            [2, 1, 0, 0, 0, 0, 0],
                            [2, 2, 1, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0]]))
        self.assertTrue(b.end == PLAYER1)

        b = Board(np.array([[1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0],
                            [2, 1, 2, 1, 1, 0, 0],
                            [1, 2, 1, 2, 2, 1, 0],
                            [1, 2, 1, 1, 1, 2, 1]]))
        self.assertTrue(b.end == PLAYER1)

    def test_end_diag_rl(self):
        b = Board(np.array([[1, 0, 0, 0, 0, 0, 0],
                            [2, 1, 0, 0, 0, 0, 0],
                            [2, 2, 1, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0]])[::-1])
        self.assertTrue(b.end == PLAYER1)

        b = Board(np.array([[1, 2, 1, 2, 1, 2, 1],
                            [1, 2, 1, 2, 1, 1, 0],
                            [1, 2, 1, 2, 1, 0, 0],
                            [2, 1, 2, 1, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0]])[::-1])
        self.assertTrue(b.end == PLAYER1)
        
        b = Board(np.array([[1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0],
                            [2, 1, 0, 0, 0, 0, 0],
                            [2, 2, 1, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0]])[::-1])
        self.assertTrue(b.end == PLAYER1)

        b = Board(np.array([[1, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0, 0],
                            [1, 1, 2, 1, 0, 0, 0],
                            [2, 1, 2, 1, 1, 0, 0],
                            [1, 2, 1, 2, 2, 1, 0],
                            [1, 2, 1, 1, 1, 2, 1]])[::-1])
        self.assertTrue(b.end == PLAYER1)
